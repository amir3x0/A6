{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import{fetchRecipeById}from'../services/BackendService';import{jsx as _jsx}from\"react/jsx-runtime\";const SelectedRecipesContext=/*#__PURE__*/createContext();export const useSelectedRecipes=()=>useContext(SelectedRecipesContext);export const SelectedRecipesProvider=_ref=>{let{children}=_ref;const[selectedRecipes,setSelectedRecipes]=useState([]);const addRecipe=async recipeId=>{try{// Fetch the recipe details by ID\nconst recipeDetails=await fetchRecipeById(recipeId);// Add the fetched recipe to the state\nsetSelectedRecipes(prevRecipes=>{// Optionally, you can check if the recipe is already added\nconst isExisting=prevRecipes.some(recipe=>recipe._id===recipeDetails._id);if(!isExisting){return[...prevRecipes,recipeDetails];}return prevRecipes;});}catch(error){console.error(\"Error fetching recipe details: \",error);// Handle error (e.g., set error state, show notification, etc.)\n}};const clearSelectedRecipes=()=>{setSelectedRecipes([]);};return/*#__PURE__*/_jsx(SelectedRecipesContext.Provider,{value:{selectedRecipes,addRecipe,clearSelectedRecipes},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","fetchRecipeById","jsx","_jsx","SelectedRecipesContext","useSelectedRecipes","SelectedRecipesProvider","_ref","children","selectedRecipes","setSelectedRecipes","addRecipe","recipeId","recipeDetails","prevRecipes","isExisting","some","recipe","_id","error","console","clearSelectedRecipes","Provider","value"],"sources":["C:/Users/USER/Documents/GitHub/A6/frontend/src/context/SelectedRecipesContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport { fetchRecipeById } from '../services/BackendService'; \r\n\r\nconst SelectedRecipesContext = createContext();\r\n\r\nexport const useSelectedRecipes = () => useContext(SelectedRecipesContext);\r\n\r\nexport const SelectedRecipesProvider = ({ children }) => {\r\n  const [selectedRecipes, setSelectedRecipes] = useState([]);\r\n\r\n  const addRecipe = async (recipeId) => {\r\n    try {\r\n      // Fetch the recipe details by ID\r\n      const recipeDetails = await fetchRecipeById(recipeId);\r\n\r\n      // Add the fetched recipe to the state\r\n      setSelectedRecipes((prevRecipes) => {\r\n        // Optionally, you can check if the recipe is already added\r\n        const isExisting = prevRecipes.some(recipe => recipe._id === recipeDetails._id);\r\n        if (!isExisting) {\r\n          return [...prevRecipes, recipeDetails];\r\n        }\r\n        return prevRecipes;\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching recipe details: \", error);\r\n      // Handle error (e.g., set error state, show notification, etc.)\r\n    }\r\n  };\r\n\r\n  const clearSelectedRecipes = () => {\r\n    setSelectedRecipes([]);\r\n  };\r\n\r\n  return (\r\n    <SelectedRecipesContext.Provider value={{ selectedRecipes, addRecipe, clearSelectedRecipes }}>\r\n      {children}\r\n    </SelectedRecipesContext.Provider>\r\n  );\r\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAQ,OAAO,CAClE,OAASC,eAAe,KAAQ,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE7D,KAAM,CAAAC,sBAAsB,cAAGN,aAAa,CAAC,CAAC,CAE9C,MAAO,MAAM,CAAAO,kBAAkB,CAAGA,CAAA,GAAMN,UAAU,CAACK,sBAAsB,CAAC,CAE1E,MAAO,MAAM,CAAAE,uBAAuB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAClD,KAAM,CAACE,eAAe,CAAEC,kBAAkB,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAE1D,KAAM,CAAAW,SAAS,CAAG,KAAO,CAAAC,QAAQ,EAAK,CACpC,GAAI,CACF;AACA,KAAM,CAAAC,aAAa,CAAG,KAAM,CAAAZ,eAAe,CAACW,QAAQ,CAAC,CAErD;AACAF,kBAAkB,CAAEI,WAAW,EAAK,CAClC;AACA,KAAM,CAAAC,UAAU,CAAGD,WAAW,CAACE,IAAI,CAACC,MAAM,EAAIA,MAAM,CAACC,GAAG,GAAKL,aAAa,CAACK,GAAG,CAAC,CAC/E,GAAI,CAACH,UAAU,CAAE,CACf,MAAO,CAAC,GAAGD,WAAW,CAAED,aAAa,CAAC,CACxC,CACA,MAAO,CAAAC,WAAW,CACpB,CAAC,CAAC,CACJ,CAAE,MAAOK,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CACvD;AACF,CACF,CAAC,CAED,KAAM,CAAAE,oBAAoB,CAAGA,CAAA,GAAM,CACjCX,kBAAkB,CAAC,EAAE,CAAC,CACxB,CAAC,CAED,mBACEP,IAAA,CAACC,sBAAsB,CAACkB,QAAQ,EAACC,KAAK,CAAE,CAAEd,eAAe,CAAEE,SAAS,CAAEU,oBAAqB,CAAE,CAAAb,QAAA,CAC1FA,QAAQ,CACsB,CAAC,CAEtC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}